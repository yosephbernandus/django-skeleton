"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.18.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

from django.conf import settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

import os
import environ

env = environ.Env(
    DEBUG=(bool, False),
    SECRET_KEY=(str, ""),
    ALLOWED_HOSTS=(list, []),
    CSRF_TRUSTED_ORIGINS=(list, []),
    SERVICE_DOMAIN=(str, ""),
    DB_APPLICATION_NAME=(str, ""),
    DB_NAME=(str, ""),
    DB_USER=(str, ""),
    DB_PASSWORD=(str, ""),
    DB_HOST=(str, ""),
    DB_PORT=(int, 5432),
    REDIS_USER=(str, ""),
    REDIS_PASSWORD=(str, ""),
    REDIS_PORT=(int, 6379),
    REDIS_HOST=(str, ""),
    REDIS_DB=(int, 1),
    REDIS_CACHEOPS_HOST=(str, ""),
    REDIS_CACHEOPS_PORT=(int, 6379),
    REDIS_CACHEOPS_PASSWORD=(str, ""),
    REDIS_CACHEOPS_DB=(int, 1),
    BROKER_URL=(str, ""),  # Currently using RABBITMQ
    LOG_PATH=(str, ""),
    ENVIRONMENT=(str, ""),
    CORS_ALLOWED_ORIGINS=(list, []),
    CORS_ALLOWED_ORIGIN_REGEXES=(list, []),
    MEDIA_ROOT=(str, os.path.join(BASE_DIR, "media")),
    STATIC_URL=(str, "static/"),
    STATIC_ROOT=(str, os.path.join(BASE_DIR, "staticfiles")),
)

environ.Env.read_env(os.path.join(BASE_DIR.parent, ".env"))

MEDIA_ROOT = env("MEDIA_ROOT")
CSRF_TRUSTED_ORIGINS: list[str] = env("CSRF_TRUSTED_ORIGINS")
ENVIRONMENT = env("ENVIRONMENT")
SERVICE_DOMAIN = env("SERVICE_DOMAIN")
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
DB_APPLICATION_NAME = env("DB_APPLICATION_NAME")
if not DB_APPLICATION_NAME:
    DB_APPLICATION_NAME = env("SERVICE_DOMAIN")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = env("ALLOWED_HOSTS")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "rest_framework",
    "corsheaders",
    "users",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "OPTIONS": {
            "options": "-c search_path=ops,public,sb,hst",
            "application_name": DB_APPLICATION_NAME,
        },
        "NAME": env("DB_NAME"),
        "USER": env("DB_USER"),
        "PASSWORD": env("DB_PASSWORD"),
        "HOST": env("DB_HOST"),
        "PORT": env("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Jakarta"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.comdjangoproject.com/en/4.2/howto/static-files/

STATIC_URL = env("STATIC_URL")
STATIC_ROOT = env("STATIC_ROOT")
if settings.DEBUG:
    STATICFILES_DIRS = [
        BASE_DIR / "static",
    ]  # Non prod only

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOG_PATH = env("LOG_PATH") or BASE_DIR
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {"format": "%(asctime)s %(levelname)s %(message)s"},
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "requests_file": {
            "level": "INFO",
            "class": "logging.handlers.WatchedFileHandler",
            "filename": os.path.join(LOG_PATH, "requests.log"),
            "formatter": "simple",
        },
        "app_file": {
            "level": "INFO",
            "class": "logging.handlers.WatchedFileHandler",
            "filename": os.path.join(LOG_PATH, "app.log"),
            "formatter": "simple",
        },
    },
    "loggers": {
        "django.request": {
            "handlers": ["requests_file"],
            "level": "INFO",
            "propagate": False,
        },
        "django.server": {
            "handlers": ["requests_file"],
            "level": "INFO",
            "propagate": False,
        },
        "users": {
            "handlers": ["app_file"],
            "level": "INFO",
            "propagate": False,
        },
    },
}
REDIS_USER = env("REDIS_USER")
REDIS_PASSWORD = env("REDIS_PASSWORD")
REDIS_HOST = env("REDIS_HOST")
REDIS_PORT = env("REDIS_PORT")
REDIS_DB = env("REDIS_DB")
# /0 is a databases usually we differentiate if there is different redis purpose
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": REDIS_PASSWORD,
        },
        "KEY_PREFIX": "aegis-service",
    }
}
REDIS_CACHEOPS_HOST = env("REDIS_CACHEOPS_HOST")
REDIS_CACHEOPS_PORT = env("REDIS_CACHEOPS_PORT")
REDIS_CACHEOPS_PASSWORD = env("REDIS_CACHEOPS_PASSWORD")
REDIS_CACHEOPS_DB = env("REDIS_CACHEOPS_DB")
CACHEOPS_DEFAULTS = {"timeout": 60 * 60}
CACHEOPS_REDIS = {
    "host": REDIS_CACHEOPS_HOST,
    "port": REDIS_CACHEOPS_PORT,
    "db": REDIS_CACHEOPS_DB,
    "password": REDIS_CACHEOPS_PASSWORD,
}
CACHEOPS = {
    "app.Model": {"ops": "all", "timeout": 60 * 60 * 24},
}
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
CELERY_BROKER_URL = env("BROKER_URL")  # Currently using RABBITMQ
CELERY_RESULT_BACKEND = "rpc://"
CELERY_ACCEPT_CONTENT = ["json", "application/text"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE
